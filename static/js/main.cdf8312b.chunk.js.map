{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/ErrorBountry.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robot","map","user","i","key","Scroll","props","style","overflowY","border","height","children","ErrorBountry","state","hasError","error","info","this","setState","Component","SearchBox","searchChange","type","placeholder","onChange","App","onSearchChange","event","searchField","target","value","fetch","then","Response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAmBeA,EAjBH,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GAE3B,OACA,yBAAKC,UAAU,8DACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCOOK,EAbC,SAAC,GAAW,IAAVC,EAAS,EAATA,MAEd,OAAQ,yBAAKJ,UAAU,OAClBI,EAAMC,KAAI,SAACC,EAAMC,GACd,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAClBR,GAAIK,EAAMG,GAAGR,GACbF,KAAMO,EAAMG,GAAGV,KACdC,MAAOM,EAAMG,GAAGT,aCGfW,EAXD,SAACC,GACf,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAE/DJ,EAAMK,WCgBIC,E,kDAlBX,WAAaN,GAAO,IAAD,8BACf,cAAMA,IACDO,MAAO,CACRC,UAAS,GAHE,E,8DAMLC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIvB,OAAGG,KAAKJ,MAAMC,SACH,yDAEJG,KAAKX,MAAMK,a,GAhBIQ,aCcZC,EAdE,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACf,OACI,yBAAKzB,UAAU,OAChB,2BAAOA,UAAU,uCAChB0B,KAAK,SACHC,YAAY,gBACZC,SAAUH,MCuCLI,G,wDAtCX,aAAc,IAAD,8BACT,gBAWRC,eAAiB,SAACC,GACd,EAAKT,SAAS,CAACU,YAAaD,EAAME,OAAOC,SAXrC,EAAKjB,MAAM,CACPb,MAAO,GACP4B,YAAY,IAJP,E,gEAOG,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAQ,EAAKjB,SAAS,CAAClB,MAAMmC,S,+BAK5B,IAAD,EACmBlB,KAAKJ,MAAxBb,EADA,EACAA,MAAM4B,EADN,EACMA,YACFQ,EAAiBpC,EAAMqC,QAAO,SAAArC,GAChC,OAAOA,EAAMP,KAAK6C,cAAcC,SAASX,EAAYU,kBAEzD,OAAQtC,EAAMwC,OAIV,yBAAK5C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWyB,aAAcJ,KAAKS,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU1B,MAAOoC,OARzB,yBAAKxC,UAAU,OACX,wBAAIA,UAAU,UAAd,aADJ,S,GAtBUuB,c,MCIEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAM0C,a","file":"static/js/main.cdf8312b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card =({name, email, id})=>{\r\n    \r\nreturn(\r\n<div className=\" tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 times\">\r\n<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n<div>\r\n    <h2>{name}</h2>\r\n    <p>{email}</p>\r\n</div>\r\n\r\n</div>\r\n    \r\n);\r\n\r\n\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList =({robot})=>{\r\n\r\n    return (<div className=\"ma3\">\r\n        {robot.map((user, i) => {\r\n            return (<Card key={i}\r\n             id={robot[i].id} \r\n             name={robot[i].name}\r\n              email={robot[i].email} />);\r\n        })}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\nreturn(\r\n    <div style={{overflowY:'scroll',border:'2px solid black',height:'500px'}}>\r\n\r\n    {props.children}\r\n\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBountry extends Component {\r\n\r\n    constructor (props){\r\n        super(props);\r\n        this.state ={\r\n            hasError:false\r\n        }\r\n    }\r\ncomponentDidCatch(error,info){\r\n    this.setState({hasError:true})\r\n}\r\n\r\n render(){\r\n     if(this.state.hasError){\r\n         return <h1>Oooopps.That is not good </h1>\r\n     }\r\n     return this.props.children\r\n }\r\n}\r\n\r\nexport default ErrorBountry;","import React from 'react';\r\n\r\nconst SearchBox =({searchChange})=>{\r\n    return(\r\n        <div className=\"pa2\">\r\n       <input className=\"pa3 ba b--green bg-lightest-blue h3 \"\r\n        type=\"search\"\r\n          placeholder=\"search robots\" \r\n          onChange={searchChange}\r\n          />\r\n         \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBountry from '../components/ErrorBountry';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            robot :[],\r\n            searchField:''\r\n    }\r\n}\r\ncomponentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(Response=>Response.json())\r\n    .then(users=>{this.setState({robot:users})});\r\n}\r\nonSearchChange = (event)=>{ \r\n    this.setState({searchField: event.target.value})\r\n}\r\n  render(){\r\n    const{robot,searchField}=this.state\r\n        const filteredRobots = robot.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        return !robot.length ?\r\n        <div className=\"pad\">\r\n            <h1 className=\"tc dim\">LOADING..</h1> </div> :\r\n              (\r\n            <div className=\"tc\">\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <ErrorBountry>\r\n                <CardList robot={filteredRobots}/>\r\n                </ErrorBountry>\r\n                </Scroll>\r\n            \r\n            </div>\r\n           );\r\n    }\r\n    }\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}